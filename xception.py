# -*- coding: utf-8 -*-
"""xception.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M7zmjPHlPbVntLq4Sq56-tYTmXUACyXR
"""

from tensorflow.keras.layers import Conv2D , Input , SeparableConv2D , Add , Dense , BatchNormalization , ReLU , MaxPool2D , GlobalAvgPool2D

from tensorflow.keras import Model

NUMBER_OF_CLASSES = 1000
INPUT_SHAPE = (299,299,3)

def conv_bn(x , filters , kernel_size , strides=1) : 
    x = Conv2D(filters=filters ,
               kernel_size=kernel_size,
               strides=strides,
               padding="same", 
               use_bias=False)(x)
    x = BatchNormalization()(x)
    return x

def sepr_bn(x , filters , kernel_size , strides=1) : 
    x = SeparableConv2D(filters=filters ,
                        kernel_size=kernel_size,
                        strides=strides,
                        padding="same" , 
                        use_bias=False)(x)
    x = BatchNormalization()(x)
    return x

def entry_flow(x):
    x = conv_bn(x , filters=32 , kernel_size=3 , strides=2)
    x = ReLU()(x)
    x = conv_bn(x , filters=64 , kernel_size=3)
    tensor = ReLU()(x)
    
    
    
    x = sepr_bn(tensor , filters=128 , kernel_size=3)
    x = ReLU()(x)
    x = sepr_bn(x , filters=128 , kernel_size=3)
    x = MaxPool2D(pool_size=3 , strides=2 , padding="same")(x)
    
    
    
    tensor = conv_bn(tensor , filters=128 , kernel_size=1 , strides=2)
    x = Add()([tensor,x])
    
    x = ReLU()(x)
    x = sepr_bn(x , filters=256 , kernel_size=3)
    x = ReLU()(x)
    x = sepr_bn(x , filters=256 , kernel_size=3)
    x = MaxPool2D(pool_size=3 , strides=2 , padding="same")(x)
    tensor = conv_bn(tensor , filters=256 , kernel_size=1 , strides=2)
    
    
    
    x = Add()([tensor,x])
    x = ReLU()(x)
    x = sepr_bn(x , filters=728 , kernel_size=3)
    x = ReLU()(x)
    x = sepr_bn(x , filters=728 , kernel_size=3)
    x = MaxPool2D(pool_size=3 , strides=2 , padding="same")(x)
    tensor = conv_bn(tensor , filters=728 , kernel_size=1 , strides=2)
    x = Add()([tensor,x])
    return x

def middle_flow(tensor):
    for _ in range(8):
        x = ReLU()(tensor)
        x = sepr_bn(x , filters=728 , kernel_size=3)
        
        x = ReLU()(x)
        x = sepr_bn(x , filters=728 , kernel_size=3)
        
        x = ReLU()(x)
        x = sepr_bn(x , filters=728 , kernel_size=3)
        
        tensor = Add()([tensor,x])
    return tensor

def exit_flow(tensor):
    x = ReLU()(tensor)
    x = sepr_bn(x , filters=728 , kernel_size=3)
    
    x = ReLU()(x)
    x = sepr_bn(x , filters=1024 , kernel_size=3)
    
    x = MaxPool2D(pool_size=3 , strides=2 , padding="same")(x)
    
    tensor = conv_bn(tensor , filters=1024 , kernel_size=1 , strides=2) 
    x = Add()([tensor , x])
    
    x = sepr_bn(x , filters=1536 , kernel_size=3)
    x = ReLU()(x)
    
    x = sepr_bn(x , filters=2048 , kernel_size=3)
    x = ReLU()(x)
    
    x = GlobalAvgPool2D()(x)
    
    x = Dense(units=NUMBER_OF_CLASSES , activation="softmax")(x)
    return x

input_ = Input(shape=INPUT_SHAPE)
x = entry_flow(input_)
x = middle_flow(x)
output_ = exit_flow(x)
model = Model(inputs = input_ , outputs = output_)

model.summary()

import numpy as np 
import tensorflow.keras.backend as k

np.sum([k.count_params(p) for p in model.trainable_weights])

from tensorflow.keras.utils import plot_model
plot_model(model ,show_shapes=True)